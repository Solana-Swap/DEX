import{a7 as h,cb as m,cN as d,t as p,bT as w}from"./Bridge.kcbhiddz.js";import{A as l}from"./aptos-BIjJ-z5H.i0e8jd2w.js";import"./index.gj1dsgp4.js";import"./vue.ij1rt9yd.js";import"./lodash-es.bp0zmem9.js";import"./axios.i01mok01.js";import"./dayjs.pb8a0t5b.js";import"./swiper.jxnsts7f.js";import"./vuex.i01hmc51.js";import"./vue-router.ii2ni9cp.js";import"./svg-icons.nc57d0by.js";var g=Object.defineProperty,u=(i,e,t)=>e in i?g(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t,s=(i,e,t)=>u(i,typeof e!="symbol"?e+"":e,t);class a{constructor(e,t,o,n){s(this,"network"),s(this,"chain"),s(this,"connection"),s(this,"contracts"),s(this,"chainId"),s(this,"coreBridge"),this.network=e,this.chain=t,this.connection=o,this.contracts=n,this.chainId=h(t);const r=n.coreBridge;if(!r)throw new Error(`CoreBridge contract Address for chain ${t} not found`);this.coreBridge=r}getGuardianSet(e){throw new Error("Method not implemented.")}getGuardianSetIndex(){throw new Error("Method not implemented.")}getMessageFee(){throw new Error("Method not implemented.")}static async fromRpc(e,t){const[o,n]=await l.chainFromRpc(e),r=t[n];if(r.network!==o)throw new Error(`Network mismatch: ${r.network} !== ${o}`);return new a(o,n,e,r.contracts)}async*publishMessage(e,t){throw new Error("Method not implemented.")}async*verifyMessage(e,t){throw new Error("Not implemented.")}async parseTransaction(e){return(await this.parseMessages(e)).map(t=>({chain:t.emitterChain,emitter:t.emitterAddress,sequence:t.sequence}))}async parseMessages(e){const t=await this.connection.getTransactionByHash(e);if(t.type!=="user_transaction")throw new Error(`${e} is not a user_transaction`);const o=t.events.filter(n=>n.type.endsWith("WormholeMessage"));if(!o||o.length===0)throw new Error(`WormholeMessage not found for ${e}`);return o.map(n=>{const r=n.data,c=new m(BigInt(r.sender).toString(16).padStart(64,"0"));return d("Uint8Array",{guardianSet:0,emitterChain:this.chain,emitterAddress:c,sequence:BigInt(r.sequence),timestamp:Number(r.timestamp),consistencyLevel:r.consistency_level,nonce:Number(r.nonce),signatures:[],payload:p.decode(r.payload)})})}}w("Aptos","WormholeCore",a);export{a as AptosWormholeCore};
